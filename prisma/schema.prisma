// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

enum PosterSource {
  RAW
  GITHUB
}

model Post {
  id     String       @id @default(uuid())
  name   String
  text   String
  source PosterSource @default(RAW)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/v11/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}

enum UserType {
  ADMIN
  EMPLOYEE
  OWNER
  GUEST
}

model User {
  id          String       @id @default(uuid())
  username    String       @unique
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  restaurants Restaurant[]
  role        UserType     @default(GUEST)

  @@index([role])
  @@index([createdAt])
}

model Restaurant {
  id                    String          @id @default(uuid())
  name                  String
  image                 String?
  menu                  RestaurantMenu? @relation(fields: [restaurantMenuId], references: [id])
  location              Location?
  restaurantMenuId      String
  previousAvgOrderCount Float           @default(0)
  newAvgOrderCount      Float           @default(0)
  tables                Table[]
  Orders                Orders[]
  User                  User?           @relation(fields: [userId], references: [id])
  userId                String?

  @@index([name])
}

model RestaurantMenu {
  id         String       @id @default(uuid())
  menuItems  MenuItems[]
  Restaurant Restaurant[]
}

model Location {
  id           String     @id @default(uuid())
  latitude     Float?
  longitud     Float?
  coordinates  String?
  restaurant   Restaurant @relation(fields: [restaurandId], references: [id])
  restaurandId String     @unique

  @@index([coordinates])
  @@index([latitude, longitud])
  @@index([latitude, longitud, restaurandId])
}

model Table {
  id           String      @id @default(uuid())
  tableNumber  Int
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
}

model MenuItems {
  id               String         @id @default(uuid())
  title            String
  description      String
  image            String?
  availability     Boolean
  category         Categories     @relation(fields: [categoriesId], references: [id])
  price            Float
  categoriesId     String
  RestaurantMenu   RestaurantMenu @relation(fields: [restaurantMenuId], references: [id])
  restaurantMenuId String
  orders           Orders[]

  @@index([availability])
  @@index([title])
  @@index([availability, title])
}

model Categories {
  id        String      @id @default(uuid())
  title     String
  MenuItems MenuItems[]

  @@index([title])
}

model Orders {
  id           String      @id @default(uuid())
  menuItems    MenuItems[]
  subTotal     Float
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String
}
