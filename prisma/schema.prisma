// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

enum PosterSource {
  RAW
  GITHUB
}

model Post {
  id     String       @id @default(uuid())
  name   String
  text   String
  source PosterSource @default(RAW)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/v11/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}

enum UserType {
  ADMIN
  EMPLOYEE
  OWNER
  GUEST
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model User {
  id               String          @id @default(uuid())
  name             String?
  email            String?         @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  Authenticator    Authenticator[]
  stripeCustomerId String?         @unique
  isActive         Boolean         @default(false)

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  restaurants  Restaurant? @relation(fields: [restaurantId], references: [id])
  role         UserType    @default(GUEST)
  restaurantId String

  @@index([name])
  @@index([role])
  @@index([createdAt])
  @@index([isActive])
}

model Restaurant {
  id                    String          @id @default(uuid())
  name                  String
  image                 String?
  menu                  RestaurantMenu? @relation(fields: [restaurantMenuId], references: [id])
  location              Location?       @relation(fields: [locationId], references: [id])
  restaurantMenuId      String?
  previousAvgOrderCount Float           @default(0)
  newAvgOrderCount      Float           @default(0)
  tables                Table[]
  Orders                Orders[]
  User                  User[]
  userId                String?
  locationId            String?

  @@index([name])
}

model RestaurantMenu {
  id         String       @id @default(uuid())
  menuItems  MenuItems[]
  Restaurant Restaurant[]
}

// model Location {
//   id           String     @id @default(uuid())
//   title        String
//   address      String?
//   website      String?
//   phone        String?
//   restaurant   Restaurant @relation(fields: [restaurandId], references: [id])
//   restaurandId String     @unique
//
//   @@index([address])
//   @@index([website])
//   @@index([phone])
//   @@index([phone, title])
//   @@index([website, title])
// }
model Location {
  id         String       @id @default(uuid())
  town       String       @unique
  Restaurant Restaurant[]

  @@index([town])
}

model Table {
  id           String      @id @default(uuid())
  tableNumber  Int
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
}

model MenuItems {
  id               String         @id @default(uuid())
  title            String
  description      String
  image            String?
  availability     Boolean
  category         Categories     @relation(fields: [categoriesId], references: [id])
  price            Float
  categoriesId     String
  RestaurantMenu   RestaurantMenu @relation(fields: [restaurantMenuId], references: [id])
  restaurantMenuId String
  orders           Orders[]

  @@index([availability])
  @@index([title])
  @@index([availability, title])
}

model Categories {
  id        String      @id @default(uuid())
  title     String
  MenuItems MenuItems[]

  @@index([title])
}

model Orders {
  id           String      @id @default(uuid())
  menuItems    MenuItems[]
  subTotal     Float
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String
}
